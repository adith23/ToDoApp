name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  AWS_REGION: eu-north-1
  CONTAINER_NAME: aura-app
  ECS_SERVICE: aura-node-service
  ECS_CLUSTER: auraCluster

jobs:
  build:
    name: ðŸš€ Testing Phase
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
      fail-fast: false

    steps:
    - name: Check Repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Build Project
      run: npm run build --if-present

    - name: Run Tests
      run: npm test

  deploy:
    name: ðŸš€ Deployment Phase
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Check Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Build, tag, and push docker image to Amazon ECR
      id: build-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: aura-app
        IMAGE_TAG: latest
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Generate Task Definition
      run: |
          cat <<EOT > aura-node-task-def.json
          {
              "taskDefinitionArn": "arn:aws:ecs:eu-north-1:242201288063:task-definition/aura-node-task-def:14",
              "containerDefinitions": [
                  {
                      "name": "aura-app",
                      "image": "242201288063.dkr.ecr.eu-north-1.amazonaws.com/aura-app:latest",
                      "cpu": 0,
                      "portMappings": [
                          {
                              "name": "5000",
                              "containerPort": 5000,
                              "hostPort": 5000,
                              "protocol": "tcp",
                              "appProtocol": "http"
                          }
                      ],
                      "essential": true,
                      "environment": [],
                      "environmentFiles": [],
                      "mountPoints": [],
                      "volumesFrom": [],
                      "ulimits": [],
                      "logConfiguration": {
                          "logDriver": "awslogs",
                          "options": {
                              "awslogs-group": "/ecs/aura-node-task-def",
                              "mode": "non-blocking",
                              "awslogs-create-group": "true",
                              "max-buffer-size": "25m",
                              "awslogs-region": "eu-north-1",
                              "awslogs-stream-prefix": "ecs"
                          },
                          "secretOptions": []
                      },
                      "systemControls": []
                  }
              ],
              "family": "aura-node-task-def",
              "taskRoleArn": "arn:aws:iam::242201288063:role/ecsTaskExecutionRole",
              "executionRoleArn": "arn:aws:iam::242201288063:role/ecsTaskExecutionRole",
              "networkMode": "awsvpc",
              "revision": 14,
              "volumes": [],
              "status": "ACTIVE",
              "requiresAttributes": [
                  {
                      "name": "com.amazonaws.ecs.capability.logging-driver.awslogs"
                  },
                  {
                      "name": "ecs.capability.execution-role-awslogs"
                  },
                  {
                      "name": "com.amazonaws.ecs.capability.ecr-auth"
                  },
                  {
                      "name": "com.amazonaws.ecs.capability.docker-remote-api.1.19"
                  },
                  {
                      "name": "com.amazonaws.ecs.capability.docker-remote-api.1.28"
                  },
                  {
                      "name": "com.amazonaws.ecs.capability.task-iam-role"
                  },
                  {
                      "name": "ecs.capability.execution-role-ecr-pull"
                  },
                  {
                      "name": "com.amazonaws.ecs.capability.docker-remote-api.1.18"
                  },
                  {
                      "name": "ecs.capability.task-eni"
                  },
                  {
                      "name": "com.amazonaws.ecs.capability.docker-remote-api.1.29"
                  }
              ],
              "placementConstraints": [],
              "compatibilities": [
                  "EC2",
                  "FARGATE"
              ],
              "requiresCompatibilities": [
                  "FARGATE"
              ],
              "cpu": "1024",
              "memory": "3072",
              "runtimePlatform": {
                  "cpuArchitecture": "X86_64",
                  "operatingSystemFamily": "LINUX"
              },
              "registeredAt": "2025-01-19T10:14:03.777Z",
              "registeredBy": "arn:aws:iam::242201288063:root",
              "enableFaultInjection": false,
              "tags": []
          }


          EOT

    - name: Render Amazon ECS task definition
      id: render-web-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      env:
        ECS_TASK_DEFINITION: aura-node-task-def.json
      with:
        task-definition: ${{env.ECS_TASK_DEFINITION}}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{steps.build-image.outputs.image}}

    - name: Debug Outputs
      run: |
        echo "Task Definition: ${{ steps.render-web-container.outputs.task-definition }}"
        echo "Cluster: ${{ env.ECS_CLUSTER }}"
        echo "Service: ${{ env.ECS_SERVICE }}"

    - name: Deployment Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-web-container.outputs.task-definition }}
        cluster: ${{ env.ECS_CLUSTER }}
        service: ${{ env.ECS_SERVICE }}
        wait-for-service-stability: true
