name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECS_TASK_DEFINITION: my-task-def
  CONTAINER_NAME: my-container
  ECS_SERVICE: my-service
  ECS_CLUSTER: my-cluster

jobs:
  build:
    name: ðŸš€ Testing Phase
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Build Project
      run: npm run build --if-present

    - name: Run Tests
      run: npm test

  deploy:
    name: ðŸš€ Deployment Phase
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Check Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build & Push Docker Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: aura-app
      run: |
        docker build -t aura-app .
        docker push aura-app:latest
        echo "push aura-app:latest" >> $GITHUB_OUTPUT

    - name: Check Build Image & Setup Rendering Config
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deployment Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
