name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  AWS_REGION: eu-north-1
  CONTAINER_NAME: aura-node
  ECS_TASK_DEFINITION: .aws/aura-node-task-def.json
  ECS_SERVICE: aura-node-service
  ECS_CLUSTER: auraCluster

jobs:
  build:
    name: ðŸš€ Testing Phase
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
      fail-fast: false

    steps:
    - name: Check Repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Build Project
      run: npm run build --if-present

    - name: Run Tests
      run: npm test

  deploy:
    name: ðŸš€ Deployment Phase
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Check Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push docker image to Amazon ECR
      id: build-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: aura-app
        IMAGE_TAG: latest
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # - name: Generate Task Definition
    #   run: |
    #       cat <<EOT > ecs-td-two.json
    #       {
    #         "family": "ecs-td-two",
    #         "containerDefinitions": [
    #           {
    #             "name": "aura-app",
    #             "image": "${{ steps.build-image.outputs.image }}",
    #             "essential": true,
    #             "portMappings": [
    #               {
    #                 "containerPort": 5173,
    #                 "hostPort": 5173,
    #                 "protocol": "tcp"
    #               }
    #             ],
    #             "logConfiguration": {
    #               "logDriver": "awslogs",
    #               "options": {
    #                 "awslogs-group": "/ecs/ecs-td",
    #                 "awslogs-region": "eu-north-1",
    #                 "awslogs-stream-prefix": "ecs"
    #               }
    #             }
    #           }
    #         ],
    #         "executionRoleArn": "arn:aws:iam::242201288063:role/ecsTaskExecutionRole",
    #         "networkMode": "bridge",
    #         "requiresCompatibilities": ["EC2"],
    #         "cpu": "256",
    #         "memory": "512"
    #       }
    #       EOT

    - name: Render Amazon ECS task definition
      id: render-web-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{env.ECS_TASK_DEFINITION}}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{steps.build-image.outputs.image}}

    - name: Debug Outputs
      run: |
        echo "Task Definition: ${{ steps.render-web-container.outputs.task-definition }}"
        echo "Cluster: ${{ env.ECS_CLUSTER }}"
        echo "Service: ${{ env.ECS_SERVICE }}"

    - name: Deployment Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-web-container.outputs.task-definition }}
        cluster: ${{ env.ECS_CLUSTER }}
        service: ${{ env.ECS_SERVICE }}
        wait-for-service-stability: true
