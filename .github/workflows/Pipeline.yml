# # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#       - Lahiru
#       - Dewni
#       - Chamika
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:
#     name: ðŸš€ Testing Phase
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [20.x]

#     steps:
#     - uses: actions/checkout@v4
#     - name: Node Version ${{ matrix.node-version }}
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'
#     - name: ðŸ”¨ Build Project and Test
#       run: npm ci
#     - run: npm run build --if-present
#     - run: npm run test

#   deploy:
#     name: ðŸš€ Deployment Phase
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#     - name: Check Deployment Files
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build & Push Docker Image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         # Build a docker container and push it to ECR so that it can
#         # be deployed to ECS.
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#     - name: Check Build Image & Setup Rendering Config
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION }}
#         container-name: ${{ env.CONTAINER_NAME }}
#         image: ${{ steps.build-image.outputs.image }}

#     - name: Deployment Amazon ECS
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true

# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code, and run tests across different versions of Node.js
# It also deploys the application to AWS ECS and includes features like linting, test coverage reporting, and Slack notifications.

name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECS_TASK_DEFINITION: my-task-def
  CONTAINER_NAME: my-container
  ECS_SERVICE: my-service
  ECS_CLUSTER: my-cluster

jobs:
  build:
    name: ðŸš€ Testing Phase
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: ðŸ”¨ Build Project
      run: npm run build --if-present

    - name: Run Tests
      run: npm test

    - name: Upload Coverage Report
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: ./coverage

  deploy:
    name: ðŸš€ Deployment Phase
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & Push Docker Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Check Build Image & Setup Rendering Config
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deployment Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Notify Slack
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      with:
        args: |
          Deployment of ${{ env.CONTAINER_NAME }} to ECS has ${{ job.status }}.
